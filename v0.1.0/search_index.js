var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = MetaTesting","category":"page"},{"location":"#MetaTesting.jl","page":"Home","title":"MetaTesting.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MetaTesting is a collection of utilities for testing \"testers,\" functions that run tests. It is primarily intended as a test dependency.","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [MetaTesting]\nPrivate = false","category":"page"},{"location":"#MetaTesting.errors","page":"Home","title":"MetaTesting.errors","text":"errors(f, msg_pattern=\"\")\n\nReturns true if at least 1 error is recorded into a testset with a failure matching the given pattern.\n\nf should be a function that takes no argument, and calls some code that uses @testset. msg_pattern is a regex or a string, that should be contained in the error message. If nothing is passed then it default to the empty string, which matches any error message.\n\nIf a test fails (rather than passing or erroring) then errors will throw an error.\n\nExamples\n\nusing MetaTesting, Test\n\nfunction test_approx(x, y)\n    @test x â‰ˆ y\nend\n\n@testset \"test_approx tests\" begin\n    test_approx(1.0, 1.0)  # passes\n    @test errors() do\n        test_approx(1.0, (2.0,))  # errors, isapprox not defined for types\n    end\nend;\n\n# output\n\nTest Summary:     | Pass  Total  Time\ntest_approx tests |    2      2  0.0s\nTest.DefaultTestSet(\"test_approx tests\", Any[], 2, false, false, true, 1.684442215984607e9, 1.68444221725024e9, false)\n\n\n\n\n\n","category":"function"},{"location":"#MetaTesting.fails-Tuple{Any}","page":"Home","title":"MetaTesting.fails","text":"fails(f)\n\nf should be a function that takes no argument, and calls some code that used @test. fails(f) returns true if at least 1 @test fails. If a test errors then it will display that error and throw an error of its own.\n\nExamples\n\nusing MetaTesting, Test\n\nfunction test_equal(x, y)\n    @test x == y\nend\n\n@testset \"test_equal tests\" begin\n    test_equal(1, 1)  # passes\n    @test fails() do\n        test_equal(1, 2)  # fails\n    end\nend;\n\n# output\n\nTest Summary:    | Pass  Total  Time\ntest_equal tests |    2      2  0.0s\nTest.DefaultTestSet(\"test_equal tests\", Any[], 2, false, false, true, 1.684442217674312e9, 1.684442217756266e9, false)\n\n\n\n\n\n","category":"method"},{"location":"#MetaTesting.nonpassing_results-Tuple{Any}","page":"Home","title":"MetaTesting.nonpassing_results","text":"nonpassing_results(f)\n\nf should be a function that takes no argument, and calls some code that used @test. Invoking it via nonpassing_results(f) will prevent those @test being added to the current testset, and will return a collection of all nonpassing test results.\n\n\n\n\n\n","category":"method"}]
}
